Described more deeply in RFC 4226 (2005)
---------------------------------

Takes two things as input:
* 64-bit counter. Value that increases over time and is synchronised between the user and the server.
* Unique shared secret (known for both user and server)

--------------------------------

Algorithm performs 3 steps:
* Generates HMAC-SHA1 value using input values (20 bytes long)
* Truncates the value - last byte and offset
* Take 4 consequent bytes starting from offset, convert them to integer and strip to last 6/8 digits.

---------------------------------

5.4.  Example of HOTP Computation for Digit = 6

   The following code example describes the extraction of a dynamic
   binary code given that hmac_result is a byte array with the HMAC-
   SHA-1 result:

        int offset   =  hmac_result[19] & 0xf ;
        int bin_code = (hmac_result[offset]  & 0x7f) << 24
           | (hmac_result[offset+1] & 0xff) << 16
           | (hmac_result[offset+2] & 0xff) <<  8
           | (hmac_result[offset+3] & 0xff) ;

   SHA-1 HMAC Bytes (Example)

   -------------------------------------------------------------
   | Byte Number                                               |
   -------------------------------------------------------------
   |00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|
   -------------------------------------------------------------
   | Byte Value                                                |
   -------------------------------------------------------------
   |1f|86|98|69|0e|02|ca|16|61|85|50|ef|7f|19|da|8e|94|5b|55|5a|
   -------------------------------***********----------------++|
